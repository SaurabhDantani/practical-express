<%- include('../utils/reload.ejs') %>

<div class="col-md-12">
  <div class="card">
    <div class="card-header d-flex">
      <h3>Ipo Subscription</h3>

      <% if (ipoDetailsQuery.isBeforeCutoffDate) { %>

        <%- include('../forms/editIpoSubscription.ejs', { IpoData: ipoDetailsQuery }) %>

        <label class="ml-auto" style="font-size: x-large; margin-top: 1.2%;" onclick="syncSubscription()">
          <i class="fa fa-sync" style="border: none; color: blue; cursor: pointer;"></i>
        </label>
      <% } %>
    </div>
    <div class="card-body table-border-style">
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>LastUpdate</th>
              <th>Retail Subscription</th>
              <th>Nii Subscription</th>
              <th>Bnii Subscription</th>
              <th>Snii Subscription</th>
              <th>Qib Subscription</th>
              <th>Employee Subscription</th>
              <th>ShareHolder Subscription</th>
              <th>Retail Application</th>
              <th>Nii Application</th>
              <th>Qib Application</th>
              <th>Employee Application</th>
              <th>ShareHolder Application</th>
              <th>Bnii Application</th>
              <th>Snii Application</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              
              <td>
                <%
                // Input date-time string
                const inputDateTime = ipoDetailsQuery?.IpoSubscription?.LastUpdate ? ipoDetailsQuery?.IpoSubscription?.LastUpdate : 'N/A';
              
                // Convert the input string into a JavaScript Date object
                const date = new Date(inputDateTime);
              
                // Extract the year, month, day, hours, minutes, and seconds
                const year = date.getFullYear();
                const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so add 1
                const day = String(date.getDate()).padStart(2, '0');
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');
              
                // Format the date as YYYY-MM-DD HH:MM:SS
                const formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
              %>
              
              <p><%= formattedDate %></p>
              </td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.RetailSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.RetailSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.NiiSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.NiiSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.BniiSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.BniiSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.SniiSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.SniiSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.QibSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.QibSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.EmployeeSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.EmployeeSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.ShareHolderSubscription ? Number(ipoDetailsQuery?.IpoSubscription?.ShareHolderSubscription).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.RetailApplication ? Number(ipoDetailsQuery?.IpoSubscription?.RetailApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.NiiApplication ? Number(ipoDetailsQuery?.IpoSubscription?.NiiApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.QibApplication ? Number(ipoDetailsQuery?.IpoSubscription?.QibApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.EmployeeApplication ? Number(ipoDetailsQuery?.IpoSubscription?.EmployeeApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.ShareHolderApplication ? Number(ipoDetailsQuery?.IpoSubscription?.ShareHolderApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.BniiApplication ? Number(ipoDetailsQuery?.IpoSubscription?.BniiApplication).toLocaleString('en-IN') : 'N/A' %></td>
              <td><%= ipoDetailsQuery?.IpoSubscription?.SniiApplication ? Number(ipoDetailsQuery?.IpoSubscription?.SniiApplication).toLocaleString('en-IN') : 'N/A' %></td>
            </tr>
          </tbody>
        </table>
        
        
      </div>
    </div>
  </div>
</div>

<!-- Loader -->
<%- include('../ui/loader.ejs') %>
<%- include('../ui/loader.ejs') %>


<script>
async function syncSubscription() {
    debugger
    const loader = document.getElementById('loader');
    loader.classList.remove('d-none');
    const ipoDetails = {
        IpoId: '<%= ipoDetailsQuery.IpoId %>',
        BseId: '<%= ipoDetailsQuery.BseId %>',
        Symbol: '<%= ipoDetailsQuery.Symbol %>',
        Type: '<%= ipoDetailsQuery.Type %>',
        Exchanged: '<%= ipoDetailsQuery.Exchanged %>',
        FetchData: '<%= ipoDetailsQuery.FetchData %>',

    };

    try {
        const response = await fetch('/scraper/syncSubscription', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(ipoDetails),
        });

        const result = await response.json();
        if (response.status === 200) {        
        renderToast('Sync successful', 'success');    
        reloadFun()
      } else {
        renderToast(result.error || 'Sync failed', 'error');
        console.log(`Sync failed: ${result.error || 'Unknown error'}`, 'error');
      }
    } catch (error) {
        renderToast('Sync failed', 'error');
    } finally {
        loader.classList.add('d-none');
    }
}
</script>